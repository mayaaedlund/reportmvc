{% extends "projbase.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
<div class="content">
    <h1>Statistik</h1>
    <h2> Marint Skydd efter havsområde</h2>
    <p> Andel i procent av total havsyta. </p>
    <div id="table-container"></div> <!-- Här kommer tabellen att visas -->
    <p> Senast uppdaterad: 2023-12-11 </p>
    <p> Källa: Skyddad Natur, SCB och Skydd av marina miljöer efter region. </p>


    <h2> Bedömning av hållbart nyttjande bestånd av fisk och skaldjur.</h2>
    <p> Antal i procent av bedömda bestånd. </p>

    <div>
        <canvas id="sustainableFishChart"></canvas>
    </div>

    <p> Källa: Hållbart nyttjade fisk- och skaldjursbestånd i kust och hav, SVERIGES MILJÖMÅL, Havs- och vattenmyndigheten. </p>



    <h2> Coverage of protected areas in relation to marine areas (Exclusive Economic Zones)(%) </h1>
    <div>
        <canvas id="marineCoverageChart"></canvas>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        fetch('{{ path('coverage_data') }}')
            .then(response => response.json())
            .then(data => {
                // Skapa en array med alla åren från 2000 till 2018
                const allYears = Array.from({ length: 2019 - 2000 }, (_, index) => 2000 + index);
                
                const labels = allYears;
                const regions = [...new Set(data.map(item => item.region))];
                const datasets = regions.map(region => {
                    return {
                        label: region,
                        data: allYears.map(year => {
                            const foundItem = data.find(item => item.year === year && item.region === region);
                            return foundItem ? foundItem.percentage : null;
                        }),
                        backgroundColor: getRandomColor(),
                        borderColor: getRandomColor(),
                        borderWidth: 1
                    };
                });

                const ctx = document.getElementById('marineCoverageChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: datasets
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Year'
                                },
                                ticks: {
                                    autoSkip: true,
                                    maxTicksLimit: 20
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching data:', error));

        // Funktion för att generera en slumpmässig färg
        function getRandomColor() {
            return `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.2)`;
        }
    });




    document.addEventListener('DOMContentLoaded', function() {
        fetch('{{ path('sustainable_data') }}')
            .then(response => response.json())
            .then(data => {
                const labels = data.map(item => item.year);
                const sustainablePercentage = data.map(item => item.sustainablePercentage);
                const sustainableAmount = data.map(item => item.sustainableAmount);
                const assessedAmount = data.map(item => item.assessedAmount);

                const ctx = document.getElementById('sustainableFishChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Sustainable Percentage',
                            data: sustainablePercentage,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }, {
                            label: 'Sustainable Amount',
                            data: sustainableAmount,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }, {
                            label: 'Assessed Amount',
                            data: assessedAmount,
                            backgroundColor: 'rgba(255, 206, 86, 0.2)',
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
    });


    document.addEventListener('DOMContentLoaded', function() {
        // Hämta data från servern
        fetch('{{ path('marine_data') }}')
            .then(response => response.json())
            .then(data => {
                // Funktion för att skapa en tabell
                function createTable(data) {
                    const table = document.createElement('table');
                    table.classList.add('stats-table'); // Lägg till en klass för CSS-styling

                    // Skapa header-rad
                    const thead = table.createTHead();
                    const headerRow = thead.insertRow();
                    const headers = ['Region', '2022', '2021', '2020', '2019', '2018'];
                    headers.forEach(headerText => {
                        const th = document.createElement('th');
                        th.appendChild(document.createTextNode(headerText));
                        headerRow.appendChild(th);
                    });

                    // Skapa body-rad
                    const tbody = table.createTBody();
                    data.forEach(item => {
                        const row = tbody.insertRow();
                        const values = [
                            item.region, 
                            item.year2022, 
                            item.year2021, 
                            item.year2020, 
                            item.year2019, 
                            item.year2018
                        ];
                        values.forEach(text => {
                            const cell = row.insertCell();
                            cell.appendChild(document.createTextNode(text));
                        });
                    });

                    return table;
                }

                // Hämta div-elementet där tabellen ska visas
                const tableContainer = document.getElementById('table-container');
                // Skapa tabellen och lägg till den i div-elementet
                const table = createTable(data);
                tableContainer.appendChild(table);
            })
            .catch(error => console.error('Error fetching data:', error));
    });

</script>
{% endblock %}
